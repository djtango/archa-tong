// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_format from "bs-platform/lib/es6/caml_format.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

function timeLeft(currentTime, endTime) {
  return endTime - currentTime;
}

function calcEndTime(startTime, duration) {
  return startTime + duration;
}

function setTimeLeft(state) {
  var start = Belt_Option.getWithDefault(state.currentTime, state.timerStartTime);
  var end_ = state.timerStartTime + state.durationInput;
  return {
          durationInput: state.durationInput,
          timerStartTime: state.timerStartTime,
          currentTime: state.currentTime,
          timeLeft: end_ - start,
          intervalId: state.intervalId
        };
}

function startClock(dispatch) {
  return Caml_option.some(setInterval((function (param) {
                    return Curry._1(dispatch, /* GetCurrentTime */2);
                  }), 30));
}

function stopClock(intervalId) {
  Belt_Option.map(intervalId, (function (prim) {
          clearInterval(prim);
          
        }));
  
}

function startClock2(dispatch) {
  return Caml_option.some(setInterval((function (param) {
                    return Curry._1(dispatch, /* AGetCurrentTime */2);
                  }), 30));
}

function businessLogic(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* ANoop */0 :
          return /* tuple */[
                  state,
                  /* IODoNothing */0
                ];
      case /* AStop */1 :
          return /* tuple */[
                  {
                    durationInput: -1.0,
                    timerStartTime: state.timerStartTime,
                    currentTime: state.currentTime,
                    timeLeft: state.timeLeft,
                    intervalId: state.intervalId
                  },
                  /* IOStopTimer */Block.__(1, [state.intervalId])
                ];
      case /* AGetCurrentTime */2 :
          return /* tuple */[
                  state,
                  /* IOGetCurrentTime */1
                ];
      case /* ASetTimeLeft */3 :
          throw [
                Caml_builtin_exceptions.match_failure,
                /* tuple */[
                  "Model.re",
                  83,
                  39
                ]
              ];
      
    }
  } else {
    switch (action.tag | 0) {
      case /* AStart */0 :
          return /* tuple */[
                  state,
                  /* IOStartTimer */Block.__(0, [action[0]])
                ];
      case /* ASetDuration */1 :
          return /* tuple */[
                  {
                    durationInput: Caml_format.caml_float_of_string(action[0]),
                    timerStartTime: state.timerStartTime,
                    currentTime: state.currentTime,
                    timeLeft: state.timeLeft,
                    intervalId: state.intervalId
                  },
                  /* IODoNothing */0
                ];
      case /* ASetTimer */2 :
          return /* tuple */[
                  {
                    durationInput: state.durationInput,
                    timerStartTime: action[1],
                    currentTime: state.currentTime,
                    timeLeft: state.timeLeft,
                    intervalId: action[0]
                  },
                  /* IODoNothing */0
                ];
      case /* ASetCurrentTime */3 :
          return /* tuple */[
                  setTimeLeft({
                        durationInput: state.durationInput,
                        timerStartTime: state.timerStartTime,
                        currentTime: action[0],
                        timeLeft: state.timeLeft,
                        intervalId: state.intervalId
                      }),
                  /* IODoNothing */0
                ];
      
    }
  }
}

function runEffect(effect) {
  if (typeof effect === "number") {
    if (effect === /* IODoNothing */0) {
      return /* ANoop */0;
    } else {
      return /* ASetCurrentTime */Block.__(3, [Date.now()]);
    }
  } else if (effect.tag) {
    return /* ASetTimer */Block.__(2, [
              stopClock(effect[0]),
              -1.0
            ]);
  } else {
    return /* ASetTimer */Block.__(2, [
              startClock2(effect[0]),
              Date.now()
            ]);
  }
}

function wrapBusinessLogicWithEffects(f, _state, _action2) {
  while(true) {
    var action2 = _action2;
    var state = _state;
    var match = Curry._2(f, state, action2);
    var effect = match[1];
    var newState = match[0];
    if (effect === /* IODoNothing */0) {
      return /* tuple */[
              newState,
              /* ANoop */0
            ];
    }
    var nextAction = runEffect(effect);
    _action2 = nextAction;
    _state = newState;
    continue ;
  };
}

var initState = {
  durationInput: -1.0,
  timerStartTime: -1.0,
  currentTime: undefined,
  timeLeft: undefined,
  intervalId: undefined
};

export {
  timeLeft ,
  calcEndTime ,
  initState ,
  setTimeLeft ,
  startClock ,
  stopClock ,
  startClock2 ,
  businessLogic ,
  runEffect ,
  wrapBusinessLogicWithEffects ,
  
}
/* No side effect */
